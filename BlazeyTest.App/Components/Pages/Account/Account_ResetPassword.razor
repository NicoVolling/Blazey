@page "/account/resetpassword"
@page "/account/resetpassword/{Id}/{Token}"
@using Blazey.Email
@using Microsoft.AspNetCore.Identity;
@using System.Text;

@inherits BaseComponent

<PageContent Title="Passwort zurücksetzen" Page="this">
    <div class="container-fluid" style="max-width: 500px;">
        <ValidationMaster>
            @if(Token == null || Id == null)
            {
                <div class="mb-3">
                    Um das Passwort zurückzusetzen, senden wir einen Link an Ihre Email, sofern ein Benutzerkonto zu dieser Email existiert.
                </div>
                if (!string.IsNullOrEmpty(Error))
                {
                    <div class="alert alert-success mb-3">@Error</div>
                }
                <ValidationChild ID="0" IsValid="() => Email?.Length > 0" Class="mb-3">
                    <TextInput Title="Email" Type="email" @bind-Value="Email" />
                </ValidationChild>
                <ValidationEvaluation Class="w-100" ValidationID="-1" InvalidDisable Context="Disabled">
                    <button class="btn btn-light w-100" disabled="@(Disabled ? "" : null)" @onclick="Reset">Passwort zurücksetzen</button>
                 </ValidationEvaluation>
            }
            else
            {
                <div class="mb-3">
                    Lege ein neues Passwort für deinen Account fest.
                </div>
                if (!string.IsNullOrEmpty(Error))
                {
                    <div class="alert alert-danger mb-3">@Error</div>
                }

                <ValidationChild ID="0" IsValid="() => NewPassword?.Length > 0" Class="mb-3">
                    <TextInput Title="Passwort" Type="password" @bind-Value="NewPassword" />
                </ValidationChild>
                <ValidationEvaluation Class="w-100" ValidationID="-1" InvalidDisable Context="Disabled">
                     <button class="btn btn-light w-100" disabled="@(Disabled ? "" : null)" @onclick="ResetPW">Passwort festlegen</button>
                 </ValidationEvaluation>
            }
        </ValidationMaster>
    </div>
</PageContent>

@code {
    private string? Email { get; set; }

    [Inject]
    public UserManager<User> UserManager { get; set; } = default!;

    [Inject]
    public EmailService EmailService { get; set; } = default!;

    [Parameter]
    public string? Token { get; set; }

    [Parameter]
    public string? Id { get; set; }

    private string? NewPassword { get; set; }

    private string? Error { get; set; }

    private async Task Reset()
    {
        if(!string.IsNullOrEmpty(Email)) 
        {
            if(await UserManager.FindByEmailAsync(Email) is User user) 
            {
                string token = Convert.ToBase64String(Encoding.ASCII.GetBytes(await UserManager.GeneratePasswordResetTokenAsync(user)));
                await EmailService.SendEmailAsync(user.Email ?? string.Empty, "Passwort zurücksetzen", $"Hallo {user.Firstname},<br><br>Klicken Sie auf den folgenden Link, um Ihre Email-Adresse zu bestätigen:<br><br><a href=\"{(NavigationManager.ToAbsoluteUri($"/account/resetpassword/{user.Id.ToString("N")}/{token}"))}\">Hier klicken um Passwort zurückzusetzen</a><br><br>Viele Grüße!<br><br>Das GameIT-Team");
                Error = "Es wurde ein Link zum Zurücksetzen deines Passwortes an deine Email gesendet.";
            }
        }
    }

    private async Task ResetPW()
    {
        if (!string.IsNullOrEmpty(Token) && !string.IsNullOrEmpty(Id))
        {
            if (await UserManager.FindByIdAsync(Id) is User user)
            {
                IdentityResult result = await UserManager.ResetPasswordAsync(user, Encoding.ASCII.GetString(Convert.FromBase64String(Token)), NewPassword ?? string.Empty);
                if (result.Succeeded == false)
                {
                    Error = APIController.TranslateIdentityError(result.Errors.FirstOrDefault());
                }
                else
                {
                    NavigateTo("/account/login");
                }
            }
        }
    }
}
